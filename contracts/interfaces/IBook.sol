// SPDX-License-Identifier: MIT
// Copyright Â© 2025 Prajwal Pitlehra
// This file is proprietary and confidential.
// Shared for evaluation purposes only. Redistribution or reuse is prohibited without written permission.
pragma solidity ^0.8.17;

import "./IOrderInfo.sol";

/**
 * @title Interface for the Order Book Contract (Book)
 * @dev Defines the functions required for managing order book state and matching.
 */
interface IBook {
    event OrderAdded(uint256 indexed orderId, uint256 price, uint256 quantity, bool isBuy);
    event OrderRemoved(uint256 indexed orderId, uint256 price, uint256 quantity, bool isBuy);
    event OrderMatched(uint256 indexed takerOrderId, uint256 indexed makerOrderId, uint256 price, uint256 quantity);
    event VaultUpdated(address indexed oldVault, address indexed newVault);

    /**
     * @notice Sets the address of the Vault contract.
     * @dev Can only be called by the admin.
     * @param _vault The address of the new Vault contract.
     */
    function setVault(address _vault) external;

    /**
     * @notice Adds a new order to the order book.
     * @dev Fetches order details from the State contract.
     * @param orderId The ID of the order to add.
     */
    function addOrder(uint256 orderId) external;

    /**
     * @notice Removes an order from the order book.
     * @dev Typically called when an order is canceled or fully filled outside of immediate matching.
     * @param orderId The ID of the order to remove.
     */
    function removeOrder(uint256 orderId) external;

    /**
     * @notice Checks if an order can be fully filled with current book liquidity.
     * @param orderId The ID of the order to check.
     * @return canFill True if the order can be fully filled, false otherwise.
     * @return fillableQuantity The maximum quantity that can be filled immediately.
     */
    function canOrderBeFullyFilled(uint256 orderId) external view returns (bool canFill, uint256 fillableQuantity);

    /**
     * @notice Attempts to match an incoming order against resting orders in the book.
     * @dev Processes matches and generates settlements.
     * @param orderId The ID of the incoming (taker) order.
     * @param quoteAmountLimit The maximum quote amount the taker is willing to spend (relevant for market buys).
     * @return settlementCount The number of settlements generated.
     * @return makerOrderIdsToUpdate An array of maker order IDs to update.
     * @return makerStatusesToUpdate An array of maker statuses to update.
     * @return makerFilledQuantitiesToUpdate An array of maker filled quantities to update.
     */
    function matchOrders(uint256 orderId, uint256 quoteAmountLimit) 
        external 
        returns (
            uint256 settlementCount,
            uint256[] memory makerOrderIdsToUpdate,
            uint8[] memory makerStatusesToUpdate,
            uint256[] memory makerFilledQuantitiesToUpdate
        );

    /**
     * @notice Retrieves the pending settlements generated by a specific taker order match.
     * @dev This should clear the stored settlements for that taker order after retrieval.
     *      Expected to be called by the CLOB contract after matchOrders.
     * @param takerOrderId The ID of the taker order whose settlements are requested.
     * @return settlements An array of Settlement structs.
     */
    function retrieveAndClearPendingSettlements(uint256 takerOrderId) external returns (IOrderInfo.Settlement[] memory settlements);

    /**
     * @notice Gets the best bid price from the buy side of the book.
     * @return The highest bid price, or 0 if no bids exist.
     */
    function getBestBidPrice() external view returns (uint256);

    /**
     * @notice Gets the best ask price from the sell side of the book.
     * @return The lowest ask price, or 0 if no asks exist.
     */
    function getBestAskPrice() external view returns (uint256);

    /**
     * @notice Gets the order IDs at a specific buy price level.
     * @param price The price level to query.
     * @return An array of order IDs at that price level.
     */
    function getBuyLevelOrderIds(uint256 price) external view returns (uint256[] memory);

    /**
     * @notice Gets the order IDs at a specific sell price level.
     * @param price The price level to query.
     * @return An array of order IDs at that price level.
     */
    function getSellLevelOrderIds(uint256 price) external view returns (uint256[] memory);

    /**
     * @notice Gets the total quantity available at a specific buy price level.
     * @param price The price level to query.
     * @return The total quantity.
     */
    function getBuyLevelTotalQuantity(uint256 price) external view returns (uint256);

    /**
     * @notice Gets the total quantity available at a specific sell price level.
     * @param price The price level to query.
     * @return The total quantity.
     */
    function getSellLevelTotalQuantity(uint256 price) external view returns (uint256);

    /**
     * @notice Gets the current buy price levels (descending).
     * @return An array of prices.
     */
    function getBuyPrices() external view returns (uint256[] memory);

    /**
     * @notice Gets the current sell price levels (ascending).
     * @return An array of prices.
     */
    function getSellPrices() external view returns (uint256[] memory);
}

